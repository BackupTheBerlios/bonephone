/*******************************************************************************
* Product of NIST/ITL Advanced Networking Technologies Division (ANTD).        *
* See ../../../../doc/uncopyright.html for conditions of use.                  *
* Author: M. Ranganathan (mranga@nist.gov)                                     *
* Modified By: Christophe Chazeau                                              *
* Modified By:  Olivier Deruelle, added JAVADOC                                *                                                                                   
* Questions/Comments: nist-sip-dev@antd.nist.gov                               *
*******************************************************************************/
package gov.nist.sip.sipheaders;
import gov.nist.sip.*;

/**
* Call ID SIPHeader
* <pre>
*6.13 Call-ID
*
*   The Call-ID general-header field uniquely identifies a particular
*   invitation or all registrations of a particular client. Note that a
*   single multimedia conference can give rise to several calls with
*   different Call-IDs, e.g., if a user invites a single individual
*   several times to the same (long-running) conference.
*
*   For an INVITE request, a callee user agent server SHOULDNOT alert the
*   user if the user has responded previously to the Call-ID in the
*   INVITE request. If the user is already a member of the conference and
*   the conference parameters contained in the session description have
*   not changed, a callee user agent server MAY silently accept the call,
*   regardless of the Call-ID. An invitation for an existing Call-ID or
*   session can change the parameters of the conference. A client
*   application MAY decide to simply indicate to the user that the
*   conference parameters have been changed and accept the invitation
*   automatically or it MAY require user confirmation.
*   A user may be invited to the same conference or call using several
*   different Call-IDs. If desired, the client MAY use identifiers within
*   the session description to detect this duplication. For example, SDP
*   contains a session id and version number in the origin (o) field.
*
*   The REGISTER and OPTIONS methods use the Call-ID value (in addition
*   to the CSeq value) to unambiguously match requests and responses. All
*   REGISTER requests issued by a single client SHOULD use the same
*   Call-ID, at least within the same boot cycle. For these requests, it
*   makes no difference whether the Call-ID value matches an existing
*   call or not.
*
*
*        Since the Call-ID is generated by and for SIP, there is no
*        reason to deal with the complexity of URL-encoding and
*        case-ignoring string comparison.
*
*
*
*        callid   =  token [ "@" token ]
*        Call-ID  =  ( "Call-ID" | "i" ) ":" callid
*
*
*   The callid MUST be a globally unique identifier and MUSTNOT be reused
*   for later calls. Use of cryptographically random identifiers [29] is
*   RECOMMENDED. Implementations MAY use the form "localid@host". Call-
*   IDs are case-sensitive and are simply compared byte-by-byte.
*
*
*        Using cryptographically random identifiers provides some
*        protection against session hijacking. Call-ID, To and From
*        are needed to identify a call leg.  The distinction between
*        call and call leg matters in calls with third-party
*        control.
*
*   For systems which have tight bandwidth constraints, many of the
*   mandatory SIP headers have a compact form, as discussed in Section 9.
*   These are alternate names for the headers which occupy less space in
*   the message. In the case of Call-ID, the compact form is i.
*
*   For example, both of the following are valid:
*
*     Call-ID: f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com
*
*
*   or
*
*     i:f81d4fae-7dec-11d0-a765-00a0c91e6bf6@foo.bar.com
*
*
*
*Handley/Schulzrinne/Schooler/Rosenberg                       [Page 51]
*Internet Draft                    SIP                  November 24, 2000
*
*</pre>
*/
public class CallID extends SIPHeader {
    
        /** callIdentifier field
         */    
	protected CallIdentifier callIdentifier;

        /** Default constructor
         */        
	public CallID () { 
            super(CALL_ID);
        }
        
        /**
         * Compare two call ids for equality.
         * @param other Object to set
         * @return true if the two call ids are equals, false otherwise
         */
        public boolean equals(Object other) {
            if (! this.getClass().equals(other.getClass())) {
                return false;
            }
            CallID that = (CallID) other;
	    if (Debug.debug) {
	        Debug.println(" this = " + this );
	        Debug.println(" that = " + that );
	    }
            return this.callIdentifier.equals(that.callIdentifier);    
        }
	
        /**
         * Get the encoded version of this id.
         * @return String.
         */        
	public String encode() { 
		return headerName + COLON + SP + 
				callIdentifier.encode() + NEWLINE;
	}

	/** Encode the body part of this header (i.e. leave out the hdrName).
	*@return String encoded body part of the header.
	*/
	public String encodeBody() {
		if (callIdentifier == null) return null;
		else return callIdentifier.encode();
	}
        
        /** get the CallId field. This does the same thing as
	 * encodeBody 
         * @return String the encoded body part of the 
         */        
	public String getCallID() { 
		return encodeBody();
	}

	/**
         * get the call Identifer member.
         * @return CallIdentifier
         */
	public CallIdentifier getCallIdentifer() {
            return callIdentifier;
        }
        
        /** set the CallId field
         * @param cid String to set. This is the body part of the Call-Id
	  *  header. It must have the form localId@host or localId.
         * @throws IllegalArgumentException if cid is null, not a token, or is 
         * not a token@token.
         */        
	public void setCallID( String cid ) throws IllegalArgumentException {
		callIdentifier = new CallIdentifier(cid);
	}

	/**
         * Set the callIdentifier member.
         * @param cid CallIdentifier to set (localId@host).
         */
	public void setCallIdentifier( CallIdentifier cid ) {
            callIdentifier = cid;
        }

}
