/*******************************************************************************
* Product of NIST/ITL Advanced Networking Technologies Division (ANTD).        *
* See ../../../../doc/uncopyright.html for conditions of use.                  *
* Author: M. Ranganathan (mranga@nist.gov)                                     *
* Modified By:  Olivier Deruelle, added JAVADOC                                *                                                                                 
* Questions/Comments: nist-sip-dev@antd.nist.gov                               *
*******************************************************************************/
package gov.nist.sip.sipheaders;
import gov.nist.sip.*;
/**
*  CSeq SIP Header
*
*<pre>
*Handley/Schulzrinne/Schooler/Rosenberg                       [Page 59]
*
*Internet Draft                    SIP                  November 24, 2000
*
*  6.21 CSeq
*
*   Clients MUST add the CSeq (command sequence) general-header field to
*   every request. A CSeq header field in a request contains the request
*   method and a single decimal sequence number chosen by the requesting
*   client, unique within a single call leg.  The sequence number MUST be
*   expressible as a 32-bit unsigned integer. The initial value of the
*   sequence number is arbitrary, but MUST be less than 2**31.
*   Consecutive requests that differ in request method, headers or body,
*   but have the same Call-ID MUST contain strictly monotonically
*   increasing and contiguous sequence numbers; sequence numbers do not
*   wrap around.  Retransmissions of the same request carry the same
*   sequence number, but an INVITE with a different message body or
*   different header fields (a "re-invitation") acquires a new, higher
*   sequence number. A server MUST echo the CSeq value from the request
*   in its response.  If the Method value is missing in the received CSeq
*   header field, the server fills it in appropriately.
*
*   The ACK and CANCEL requests MUST contain the same CSeq value as the
*   INVITE request that it refers to, while a BYE request cancelling an
*   invitation MUST have a higher sequence number. A BYE request with a
*   CSeq that is not higher should cause a 400 response to be generated.
*
*   A user agent server MUST remember the highest sequence number for any
*   INVITE request with the same Call-ID value. The server MUST respond
*   to, and then discard, any INVITE request with a lower sequence
*   number.
*
*   All requests spawned in a parallel search have the same CSeq value as
*   the request triggering the parallel search.
*
*
*
*        CSeq  =  "CSeq" ":" 1*DIGIT Method
*
*
*
*        Strictly speaking, CSeq header fields are needed for any
*        SIP request that can be cancelled by a BYE or CANCEL
*        request or where a client can issue several requests for
*        the same Call-ID in close succession. Without a sequence
*        number, the response to an INVITE could be mistaken for the
*        response to the cancellation (BYE or CANCEL). Also, if the
*        network duplicates packets or if an ACK is delayed until
*        the server has sent an additional response, the client
*        could interpret an old response as the response to a re-
*        invitation issued shortly thereafter. Using CSeq also makes
*        it easy for the server to distinguish different versions of
*        an invitation, without comparing the message body.
*
*   The Method value allows the client to distinguish the response to an
*   INVITE request from that of a CANCEL response. CANCEL requests can be
*   generated by proxies; if they were to increase the sequence number,
*   it might conflict with a later request issued by the user agent for
*   the same call.
*
*   With a length of 32 bits, a server could generate, within a single
*   call, one request a second for about 136 years before needing to wrap
*   around.  The initial value of the sequence number is chosen so that
*   subsequent requests within the same call will not wrap around. A
*   non-zero initial value allows to use a time-based initial sequence
*   number, if the client desires. A client could, for example, choose
*   the 31 most significant bits of a 32-bit second clock as an initial
*   sequence number.
*
*   Forked requests MUST have the same CSeq as there would be ambiguity
*   otherwise between these forked requests and later BYE issued by the
*   client user agent.
*
*   Example:
*
*
*     CSeq: 4711 INVITE
*
*</pre>
*
*/
public  class CSeq extends SIPHeader {
    
        /** seqno field
         */    
	protected long seqno;

        /** method field
         */        
        protected String method;
        
        /**
         *Constructor.
         */
	public CSeq() { 
            super(CSEQ);
        }
        
        /**
         * Compare two cseq headers for equality.
         * @param other Object to compare against.
         * @return true if the two cseq headers are equals, false
         * otherwise.
         */
        public boolean equals( Object other) {
            if (! other.getClass().equals(this.getClass())) {
                return false;
            }
            CSeq that = (CSeq) other;
            if (this.seqno != that.seqno) {
                return false;
            }
            if (this.method.compareToIgnoreCase(that.method) != 0) {
                return false;
            }
            return true;
        }
        
        /**
         * Return canonical encoded header.
         * @return String with canonical encoded header.
         */
	public String encode() {
	    return headerName + COLON + SP + encodeBody() + NEWLINE;
	}
       
        /**
         * Return canonical header content. (encoded header except headerName:)
         * @return encoded string.
         */
	public String encodeBody() {
	    return seqno + SP + method.toUpperCase();
	}
       
        /**
         * Get the sequence number.
         * @return long the sequence number
         */
	public	 long getSeqno() {
            return seqno;
        } 
                
        /**
         * Get the method.
         * @return String the method.
         */
       public String getMethod() {
           return method ;
       } 

	/**
	* Set the seqno member  
	*@param seq sequence number to set.
	*/
	public	 void setSeqno(long seq) {
            seqno = seq ;
        }
        
	/**
         * Set the method member
         * @param meth String to set
         */
	public	 void setMethod(String meth) {
            method = meth ;
        }
        
}
