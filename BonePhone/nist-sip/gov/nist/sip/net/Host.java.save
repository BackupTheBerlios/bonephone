/*******************************************************************************
 * Product of NIST/ITL Advanced Networking Technologies Division (ANTD).        *
 * See ../../../../doc/uncopyright.html for conditions of use.                  *
 * Author: M. Ranganathan (mranga@nist.gov)                                     *
 * Modified by: Marc Bednarek (bednarek@nist.gov) 			       *
 * Modified By:  O. Deruelle (deruelle@nist.gov), added JAVADOC                 *
 * Questions/Comments: nist-sip-dev@antd.nist.gov                               *
 *******************************************************************************/
package gov.nist.sip.net;
import gov.nist.sip.*;
import java.net.* ;
import java.util.StringTokenizer;

/**
 * Stores hostname, address pairs.
 */
public class Host extends NetObject  implements HostAddrTypes {
    
        /** hostName field
         */
    protected String hostname;
    
        /** address field
         */
    protected String address;
    
    protected int addressType;
    
    private InetAddress inetAddress;
    
    private static final boolean doSimpleCompare = true;
    
        /** default constructor
         */
    public Host() {
        addressType = HOSTNAME;
    }
         /** Constructor given host name or IP address.
          */
    public Host(String hostName)
    throws IllegalArgumentException {
        if (hostName == null)
            throw new IllegalArgumentException("null host name");
        StringTokenizer st = new StringTokenizer(hostName,".");
        int counter = 0;
        while (st.hasMoreTokens())  {
            counter ++;
            if (counter > 4)
                throw new IllegalArgumentException
                ("Bad host name or address");
            String nexttok = st.nextToken();
            try {
                Integer.parseInt(nexttok);
            } catch (Exception ex) {
                addressType = HOSTNAME;
                this.hostname = hostName;
                return;
            }
        }
        this.addressType = IPV4ADDRESS;
        this.address = hostName;
    }
    
        /** constructor
         * @param name String to set
         * @param addrType int to set
         */
    public Host(String name, int addrType ) {
        String nm = name.trim().toLowerCase();
        addressType = addrType;
        if (doSimpleCompare) {
            hostname = nm;
        }
        if ( addrType == HOSTNAME) {
            hostname = nm;
        } else {
            address = nm;
        }
    }
    
        /**
         * Return the host name in encoded form.
         * @return String
         */
    public String encode() {
        if (addressType == HOSTNAME) return hostname.trim();
        else return address.trim();
    }
    
        /**
         * Compare for equality of hosts.
         * Host names are compared by textual equality check if doSimpleCompare
         * flag is set to be true. Otherwise, we do a dns lookup.
         * @param obj Object to set
         * @return boolean
         */
    public boolean equals (Object obj) {
        if (! this.getClass().equals(obj.getClass())) {
            return false;
        }
        Host other = (Host)obj;
        // No dns lookup.
        if (doSimpleCompare) {
            if (addressType == HOSTNAME)
                return hostname.compareToIgnoreCase(other.hostname) == 0;
            else
                return address.compareToIgnoreCase(other.address) == 0;
        }
        
        if(hostname != null && other.hostname != null ) {
            return hostname.compareTo(other.hostname) == 0 ;
        } else if ( address != null && other.address != null) {
            return address.compareTo(other.address) == 0 ;
        } else if (address != null ) {
            // Connvert the other address and cache it
            // away for future compares.
            // assume that there is a one-one mapping of
            // hostnames and IP addresses for now.
            try {
                if (other.address == null) {
                    other.address = InetAddress.
                    getByName(other.hostname).getHostAddress();
                }
                return address.compareTo(other.address) ==  0 ;
            } catch (UnknownHostException ex) {
                dbgPrint("Could not resolve hostname " + ex);
                return false;
            }
        } else {
            try {
                address = InetAddress.getByName(hostname).
                getHostAddress();
                return address.compareTo(other.address) ==  0 ;
            } catch (UnknownHostException ex) {
                dbgPrint("Could not resolve hostname " + ex);
                return false;
            }
        }
    }
    
        /** get the HostName field
         * @return String
         */
    public	 String getHostname()  {
        if( addressType == HOSTNAME) return hostname ;
        else return address;
    }
    
        /** get the Address field
         * @return String
         */
    public String getAddress() {
        return address;
    }
    
        /**
         * Convenience function to get the raw IP destination address
         * of a SIP message as a String.
         * @return String
         */
    public String getIpAddress() {
        String rawIpAddress = null;
        if (address == null && hostname == null) return null;
        if (addressType == HOSTNAME) {
            try {
                if (inetAddress == null) 
                    inetAddress= InetAddress.getByName(hostname);
                rawIpAddress = inetAddress.getHostAddress();
            } catch (UnknownHostException ex) {
                dbgPrint("Could not resolve hostname " + ex);
            }
        } else {
            rawIpAddress = address;
        }
        return rawIpAddress;
    }
    
        /**
         * Set the hostname member
         * @param h String to set
         */
    public	 void setHostname(String h) {
        inetAddress = null;
        hostname = h.trim().toLowerCase();
        addressType = HOSTNAME;
        
    }
    
        /** Set the IP Address.
         *@param address is the address string to set.
         */
    public void setHostAddress(String address) {
        inetAddress = null;
        this.address = address.trim();
        addressType = IPV4ADDRESS;
    }
    
        /**
         * Set the address member
         * @param a String to set
         */
    public void setAddress(String address) {
        inetAddress = null;
        this.address = address.trim();
        addressType = IPV4ADDRESS;
    }
    
        /** Return true if the address is a DNS host name
         *  (and not an IPV4 address)
         *@return true if the hostname is a DNS name
         */
    public boolean isHostname() {
        return addressType == HOSTNAME;
    }
    
        /** Return true if the address is a DNS host name
         *  (and not an IPV4 address)
         *@return true if the hostname is host address.
         */
    public boolean isIPAddress() {
        return addressType != HOSTNAME;
    }
    
        /** Get the inet address from this host.
         *@throws UnkownHostexception when the host name cannot be resolved.
         */
    public InetAddress getInetAddress() throws java.net.UnknownHostException  {
        if (address == null && hostname == null) return null;
        if (inetAddress != null) return inetAddress;
        if (addressType == HOSTNAME) {
            inetAddress= InetAddress.getByName(hostname);
            return inetAddress; 
        } else {
            inetAddress= InetAddress.getByName(address);
            return inetAddress;
            
        }
        
    }    
    
}
